pipeline {
    agent any    
    
    environment {
        STASH_CODE = 'CODE'
        AWS_REGION = 'us-east-1'
        STACK_NAME = 'todo-list-aws'
        TEMPLATE_FILE = 'template.yaml'
        CAPABILITIES = 'CAPABILITY_IAM'
        GIT_URL = 'https://github.com/jdcr-dev/unir-todo-list-aws.git'
        GIT_TOKEN = 'GIT_HUB_TOKEN'
    }
    
    
    stages {
        
        stage('Get Code') {
            steps {
                
                echo "Running on agent: ${env.NODE_NAME}"
                echo "Build stage is running in workspace: ${env.WORKSPACE}"
                echo "Current stage: ${env.STAGE_NAME}"
                
                git branch: 'develop', 
                    credentialsId: GIT_TOKEN,
                    url: GIT_URL
                    
                stash name: STASH_CODE, includes: '**/*, .git/**/*'
            }
        }
        
        stage('Static Test') {
            agent { label 'static-agent' }
            steps {
                script {
                    unstash STASH_CODE
                    
                    echo "Running on agent: ${env.NODE_NAME}"
                    echo "Build stage is running in workspace: ${env.WORKSPACE}"
                    echo "Current stage: ${env.STAGE_NAME}"
                    
                    def FOLDER_STATIC_TEST = "src"
                    
                    // He tenido que aÃ±adir esta comprobacion por que Bandit no me devolvia error si la carpeta la escribia mal.
                    if(!fileExists(FOLDER_STATIC_TEST)) {
                        error "No existe la carpeta ${FOLDER_STATIC_TEST}"
                    }
                    
                    sh """
                        flake8 --exit-zero --format=pylint ${FOLDER_STATIC_TEST} > test/flake8.out
                    """
                    
                    recordIssues tools: [flake8(name: 'Flake8', pattern: 'test/flake8.out')], 
                        qualityGates:[
                            [threshold: 8, type: 'TOTAL', unstable: false], 
                            [threshold: 10, type:'TOTAL', unstable: false]],
                        enabledForFailure: false
                    
     
                    sh """
                        bandit -r ${FOLDER_STATIC_TEST} -f custom -o test/bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}" | echo "Bandit finished"
                    """
                    
                    recordIssues tools: [pyLint(name: 'Bandit', pattern: 'test/bandit.out')], 
                        qualityGates:[
                            [threshold: 2, type: 'TOTAL', unstable: false], 
                            [threshold: 4, type:'TOTAL', unstable: false]],
                        enabledForFailure: false
                }
            }
        }
        
        stage('Deploy') {
            agent { label 'static-agent' }
            steps {
                
                script {
                    unstash STASH_CODE
                    
                    echo "Running on agent: ${env.NODE_NAME}"
                    echo "Build stage is running in workspace: ${env.WORKSPACE}"
                    echo "Current stage: ${env.STAGE_NAME}"
                    
                    sh """
                        sam validate --template-file ${TEMPLATE_FILE} --region ${AWS_REGION}
                        
                        sam build
                        
                        sam deploy --template-file ${TEMPLATE_FILE} \
                                   --stack-name ${STACK_NAME} \
                                   --region ${AWS_REGION} \
                                   --parameter-overrides Stage=staging \
                                   --capabilities ${CAPABILITIES} \
                                   --no-confirm-changeset \
                                   --debug \
                                   --no-fail-on-empty-changeset
                    """
                    
                    def output_Base_URL = sh(script: """
                        aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query "Stacks[0].Outputs[?OutputKey=='BaseUrlApi'].OutputValue" --output text
                    """, returnStdout: true).trim()
                    
                    echo "Raw output: ${output_Base_URL}"
                    
                    env.BASE_URL = output_Base_URL // Asi lo tenia antes pero en teoria esto no sirve para pasarlo entre agentes aunque no he sido capaz de reproducirlo
                    def baseUrl = output_Base_URL
                    writeFile file: 'baseUrl.txt', text: baseUrl

                    // Guardamos el fichero para que este accesible desde cualquier agente
                    stash name: 'baseUrl_Stash', includes: 'baseUrl.txt'
                    
                    
                    sh """ 
                        echo "[SO] - LA URL RECUPERADA ES: ${BASE_URL}"
                    """
                }
            }
        }
        
        stage('Rest Test') {
            agent { label 'api-agent' }
            steps {
                script {
                    unstash STASH_CODE
                    unstash 'baseUrl_Stash'
                    
                    def baseURL = readFile 'baseUrl.txt'
                    echo "Valor url desde otro agente: ${baseURL}"
                    env.BASE_URL = baseURL;
                        
                    echo "Running on agent: ${env.NODE_NAME}"
                    echo "Build stage is running in workspace: ${env.WORKSPACE}"
                    echo "Current stage: ${env.STAGE_NAME}"
                    
                    sh '''
                        export PYTHONPATH=.
                        pytest --junitxml=test/result-rest.xml test/integration/todoApiTest.py
                    '''
                    junit 'test/result*.xml'
                }
            }
        }
        
        stage('Promote') {
            agent { label 'static-agent' }
            steps {
                script {
                    
                    // Al hacer el unstash no me traia el directorio .git asi que he tenido que volver a clonarlo no veo otra forma
                    //unstash STASH_CODE
                    
                    git branch: 'develop', 
                        credentialsId: GIT_TOKEN,
                        url: GIT_URL
                    
                    echo "Running on agent: ${env.NODE_NAME}"
                    echo "Build stage is running in workspace: ${env.WORKSPACE}"
                    echo "Current stage: ${env.STAGE_NAME}"
                    
                    def gitUrlWithAuth = "${env.GIT_URL}".replaceAll("https://", "https://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@")
                        
                    // Set Git remote URL using 'git remote set-url'
                    sh "git remote set-url origin ${gitUrlWithAuth}"
                }
                
                // git remote set-url origin https://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@github.com/jdcr-dev/unir-todo-list-aws.git
                sh '''
                    git checkout master
                    git pull origin master
                    git fetch origin master
                    
                    # || True es para evitar el exit code que generaba el comando ya que habia que resolver un conflicto
                    git merge origin/develop --no-commit --no-ff || true

                    # Volvemos al estado anterio del fichero
                    git reset HEAD Jenkinsfile

                    # Restauramos el Jenkisfile que original de la rama
                    git checkout -- Jenkinsfile

                    # Stage all other changes
                    git add .

                    # Creamos el comit del merge
                    git commit -m "Merged DEVELOP into MASTER, excluding Jenkinsfile"
                    
                    # Subimos los cambios
                    git push
                '''
            }
        }
        
    }
    
    
    
    
    
    post {
        always {
            // En ocasiones no me borra el workspace y me sale un error, en otras no lo borra y no sale error, pense que podria ser que con una espera se solucionara pero no hubo forma
            sleep(time: 10, unit: 'SECONDS')
            cleanWs()
        }
    }
    
    
    
}
